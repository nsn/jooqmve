/*
 * This file is generated by jOOQ.
*/
package com.nightspawn.jooq.pgsqlcustomtype.generated.tables;


import com.nightspawn.jooq.pgsqlcustomtype.generated.Indexes;
import com.nightspawn.jooq.pgsqlcustomtype.generated.Keys;
import com.nightspawn.jooq.pgsqlcustomtype.generated.Public;
import com.nightspawn.jooq.pgsqlcustomtype.generated.tables.records.MyTableRecord;
import com.nightspawn.jooq.pgsqlcustomtype.generated.udt.records.MyCustomTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MyTable extends TableImpl<MyTableRecord> {

    private static final long serialVersionUID = -107837493;

    /**
     * The reference instance of <code>public.my_table</code>
     */
    public static final MyTable MY_TABLE = new MyTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MyTableRecord> getRecordType() {
        return MyTableRecord.class;
    }

    /**
     * The column <code>public.my_table.table_id</code>.
     */
    public final TableField<MyTableRecord, Long> TABLE_ID = createField("table_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('my_table_table_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.my_table.single_count</code>.
     */
    public final TableField<MyTableRecord, MyCustomTypeRecord> SINGLE_COUNT = createField("single_count", com.nightspawn.jooq.pgsqlcustomtype.generated.udt.MyCustomType.MY_CUSTOM_TYPE.getDataType(), this, "");

    /**
     * The column <code>public.my_table.count_array</code>.
     */
    public final TableField<MyTableRecord, MyCustomTypeRecord[]> COUNT_ARRAY = createField("count_array", com.nightspawn.jooq.pgsqlcustomtype.generated.udt.MyCustomType.MY_CUSTOM_TYPE.getDataType().getArrayDataType(), this, "");

    /**
     * Create a <code>public.my_table</code> table reference
     */
    public MyTable() {
        this(DSL.name("my_table"), null);
    }

    /**
     * Create an aliased <code>public.my_table</code> table reference
     */
    public MyTable(String alias) {
        this(DSL.name(alias), MY_TABLE);
    }

    /**
     * Create an aliased <code>public.my_table</code> table reference
     */
    public MyTable(Name alias) {
        this(alias, MY_TABLE);
    }

    private MyTable(Name alias, Table<MyTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private MyTable(Name alias, Table<MyTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MY_TABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MyTableRecord, Long> getIdentity() {
        return Keys.IDENTITY_MY_TABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MyTableRecord> getPrimaryKey() {
        return Keys.MY_TABLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MyTableRecord>> getKeys() {
        return Arrays.<UniqueKey<MyTableRecord>>asList(Keys.MY_TABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MyTable as(String alias) {
        return new MyTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MyTable as(Name alias) {
        return new MyTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MyTable rename(String name) {
        return new MyTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MyTable rename(Name name) {
        return new MyTable(name, null);
    }
}
